# std dependencies
import std/paths ; export paths
import std/dirs
import std/strformat
# confy dependencies
import ./types
import ./tool/git
import ./tool/logger
import ./tool/helper
import ./cfg

#_____________________________
# Dir Helpers
#___________________
proc chgDir *(path :DirFile; to :Dir; sub :Dir= "") :DirFile=  DirFile(dir:to, file:path.file.replace(sub, ""))
  ## Returns a new DirFile with its path be coming from dir `to` instead.
proc remap *(files :seq[DirFile]; to :Dir) :seq[DirFile]=
  ## Returns a new DirFile list, with their paths coming from dir `to` instead.
  for path in files: result.add DirFile(dir:to, file:path.file)

#_____________________________
# Dir Setup
#___________________
proc setup *(trg :Dir) :void=
  if not quiet: log0 &"Setting up folder {trg}"
  let curr = if not trg.isAbsolute: cfg.binDir/trg else: trg
  block setupDir:
    if curr.dirExists and "bin" notin curr:
      if not quiet: log1 &"Folder {curr.absolutePath} already exists. Ignoring its setup."
      break setupDir
    createDir curr
  if cfg.binDir in curr:  (curr/".gitignore").writeFile(git.ignore)
  # elif cfg.libDir in curr:  (curr/".gitignore").writeFile(git.ignoreAll)

#_____________________________
# Remotes Management
#___________________
proc fromRemote *(file :DirFile; dir :Dir; sub :Dir= Dir("")) :DirFile=
  ## Adjusts the input list of source files to be searched from `srcDir/*` first by default.
  ## This is needed tor remap a remote glob into srcDir/subDir, so the files are searched inside the local srcDir first.
  if verbose: log1 &"Changing  {file.dir}  to  {dir}  for file:  {file.file}"
  result = file.chgDir(dir, sub)  # readability alias for chgDir
proc fromRemote *(list :seq[DirFile]; dir :Dir; sub :Dir= Dir("")) :seq[DirFile]=
  ## Adjusts the input list of source files to be searched from `srcDir/subDir` first by default.
  ## This is needed to remap a remote glob into srcDir/, so the files are searched inside the local folder first.
  result = list.remap(dir/sub)  # readability alias for remap
#_____________________________
proc globRemote *(dir :Dir; ext :string= ".c"; rec :bool= false; sub :Dir= Dir("")) :seq[DirFile]=
  ## Globs every file that has the given `ext` in the input remote `dir`.
  ## Returns the list of files, adjusted so they are searched from `cfg.srcDir` first.
  ## `ext` the extension to search for. Default: `.c`
  ## `rec` recursive search in all folders and subfolders when true. Default: `false`
  result = dir.glob(ext, rec).fromRemote(dir, sub)
#_____________________________
proc adjustRemotes *(obj :var BuildTrg) :void=
  ## Adjusts the list of source files in the object, based on its remotes.
  ## Files will be:
  ## - Searched for in `cfg.srcDir` first.
  ## - Adjusted to come from the folders stored in the obj.remotes list when the local file is missing.
  if cfg.verbose: log &"Adjusting remotes for {obj.trg}."
  for file in obj.src.mitems:
    # Dont adjust if the file exists
    if file.path.fileExists:
      if cfg.verbose: log &"Local file exists. Not adjusting :  {file.path}"
      continue
    # Adjust for a missing extension with Nim
    elif obj.lang == Lang.Nim and (not file.path.endsWith(".nim")):
      log &"Nim file was sent without extension. Searching for it at  {file.path}"
      file = file.findNoExt(Lang.Nim)
      continue
    # Search for the file in the remotes
    if obj.remotes.len < 1: cerr &"The source code file {file.path} couldn't be found."
    if cfg.verbose: echo " ... "; log1 &"File {file.file} doesn't exist in local. Searching for it in the remote folders list."
    for dir in obj.remotes:  # Search for the file in the remotes
      let adj = file.fromRemote(dir, obj.sub)
      if cfg.verbose: log1 &"File:  {file.path}\n{tab}Becomes:  {adj.path}"
      file = adj

